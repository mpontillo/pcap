syntax = "proto3";

package api;

service PCAP {
    rpc InterfaceList (InterfaceListRequest) returns (InterfaceListReply) {}
    rpc LiveCapture (CaptureRequest) returns (stream CaptureReply) {}
    rpc Init (InitRequest) returns (InitReply) {}
}

// via https://github.com/the-tcpdump-group/libpcap/blob/master/pcap/pcap.h

// #define PCAP_IF_LOOPBACK   0x00000001 /* interface is loopback */
// #define PCAP_IF_UP         0x00000002 /* interface is up */
// #define PCAP_IF_RUNNING    0x00000004 /* interface is running */
// #define PCAP_IF_WIRELESS   0x00000008 /* interface is wireless (*NOT* necessarily Wi-Fi!) */
// #define PCAP_IF_CONNECTION_STATUS                0x00000030 /* connection status: */
// #define PCAP_IF_CONNECTION_STATUS_UNKNOWN        0x00000000 /* unknown */
// #define PCAP_IF_CONNECTION_STATUS_CONNECTED      0x00000010 /* connected */
// #define PCAP_IF_CONNECTION_STATUS_DISCONNECTED   0x00000020 /* disconnected */
// #define PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE 0x00000030 /* not applicable */

enum InterfaceFlags {
    option allow_alias = true;
    IFF_UNKNOWN = 0;
    IFF_LOOPBACK = 0x1;
    IFF_UP = 0x2;
    IFF_RUNNING = 0x4;
    PCAP_IF_WIRELESS = 0x8;
    PCAP_IF_CONNECTION_STATUS = 0x30;
    PCAP_IF_CONNECTION_STATUS_UNKNOWN = 0x00;
    PCAP_IF_CONNECTION_STATUS_CONNECTED = 0x10;
    PCAP_IF_CONNECTION_STATUS_DISCONNECTED = 0x20;
    PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE = 0x30;
}

message Address {
    string value = 1;
}

message Interface {
    string name = 1;
    repeated Address ethernet_addresses = 2;
    repeated Address ipv4_addresses = 3;
    repeated Address ipv6_addresses = 4;
    bool up = 5;
}

message InterfaceListRequest {
    bool all = 1;
}

message InterfaceListReply {
    bool success = 1;
    repeated Interface interfaces = 2;
}

message InitRequest {
    oneof optional_filter {
        string filter = 1;
    }
    oneof optional_alias {
        string alias = 2;
    }
    repeated string interfaces = 3;
}

message InitReply {
    bool success = 1;
    oneof optional_filter {
        string filter = 2;
    }
    string alias = 3;
    repeated string interfaces = 4;
}

message CaptureRequest {
    string interface = 1;
    string filter = 2;
    bool immediate_mode = 3;

}

message CaptureHeader {
    int32 timezone = 1; // GMT to local correction
    uint32 sigfigs = 2; // Timestamp accuracy
    uint32 snaplen = 3; // Snapshot length
    uint32 network = 4; // Data link type
}

message PacketData {
    uint32 seconds = 1;
    uint32 microseconds = 2;
    uint32 original_length = 3;
    bytes data = 4;
}

message CaptureReply {
    oneof reply_data {
        CaptureHeader header = 1;
        PacketData data = 2;
        string error = 3;
    }
}
